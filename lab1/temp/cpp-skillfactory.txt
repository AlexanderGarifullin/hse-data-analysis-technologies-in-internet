Кому и для чего нужен C++

Разработчикам ИИ, нейронных сетей и игр, физикам и даже музыкантам
C++ — как конструктор Lego: вы можете собрать свой замок мечты, а можете кричать от боли, наступая на забытые на полу детали. На нем пишут игры и обучают нейросети, благодаря ему работает поиск Google и роботы торговых бирж. Вместе с Никитой Лестенко, ментором курса «Программирование на C++», рассказываем, где применяют язык и зачем его учить.

Что такое язык программирования C++
C++ — это язык программирования, который был разработан в 80-х годах прошлого века как расширение языка C. Этот язык отличается от Си тем, что имеет больший набор возможностей, включая объектно-ориентированное программирование и шаблоны.
Для чего нужен C++
C++ используется для создания программного обеспечения разного рода: от игр до операционных систем. Этот язык также широко применяется в интенсивной обработке данных и научных расчетах.

C++ предоставляет разработчикам мощный и гибкий инструмент для создания программного обеспечения. Он позволяет писать эффективный и быстрый код, что делает его одним из наиболее популярных языков программирования в мире.

Что можно написать на C++
C++ позволяет создавать приложения и программы любой сложности: от простых консольных утилит до сложных игровых движков. Также на этом языке можно программировать микроконтроллеры и системы в реальном времени. На C++ можно написать практически все что угодно, от системных приложений до мобильных приложений. Этот язык используется для создания операционных систем, программного обеспечения разного рода и игровых движков.

Где используется C++
C++ используется во многих областях, таких как разработка игр, научные исследования и разработка системного программного обеспечения. Он также широко применяется в области финансов и банковского дела.

Что пишут на C++
Многие известные приложения были написаны на C++, включая операционные системы Windows и OS X, многие игры, такие как World of Warcraft и Counter-Strike. На C++ можно написать практически любое программное обеспечение, от простых консольных утилит до сложных приложений. Благодаря C++ работают Unreal Engine 4, Microsoft Office и Adobe Photoshop.

Какой язык программирования выбрать, чтобы стать востребованным специалистом и учиться с удовольствием? Пройдите наш тест и узнайте.
Кратчайшая история создания C++
Первые версии языка C++ (си-плюс-плюс, еще его называют «си-пи-пи», С plus plus, «плюсы») появились в начале 1980-х годов. Их создатель — датский программист из компании Bell Laboratories Бьерн Страуструп. Он моделировал распределения вызовов по АТС (автоматическим телефонным станциям).

Тогда у Страуструпа было два типа языков: низкоуровневые и языки на основе Фортрана или Алгола, которые были очень медленными.

Низкоуровневые языки дают полный контроль над ресурсами компьютера: процессором, памятью, периферийными устройствами. Но в таких языках мало готовых инструментов, а значит, любые сложные концепции и функции придется кодить самостоятельно. В языках высокого уровня уже есть все необходимые абстракции.

Страуструп объединил возможности объектно-ориентированного C и языка Simula, основанного на Алголе. Главное привнесенное в C новшество — классы, основной элемент в объектно-ориентированном программировании, содержащий в себе данные и код, который ими управляет.
Так появился «‎C с классами»‎ или «‎новый C»‎, который в 1983 году получил свое окончательное название — C плюс-плюс. «++» — это оператор, который означает «добавить единицу». То есть к возможностям языка C добавили еще одну.

А мне нужен C++?
Да, если вы хотите разрабатывать сложные продукты и сервисы. Опытные C++-программисты — это разработчики ИИ, беспилотных автомобилей, нейронных сетей, банковских, поисковых и ГИС-систем, операционных систем, микроконтроллеров, браузеров, серверов и видеоигр.

Основные области использования C++
разработка игр и игровых движков (Unreal Engine, Unity);
GPU-вычисления (cryptocurrency, deep learning);
разработка высоконагруженных и высокопроизводительных приложений.
C++ — производительный язык, он помогает дорожным картам в GPS не тупить и строить оптимальные маршруты, любимым играм — не лагать и выдавать максимальное качество с выкрученными до предела настройками графики, банковским сервисам — быть круглосуточными, а переводам — моментальными.
Производительность — важная характеристика любой компьютерной игры. Counter-Strike, StarCraft: Brood War, Diablo I, World of Warcraft — все они появились давно и были написаны на C++, как и операционные системы консолей Xbox и PlayStation, ядра популярных игровых движков Unreal Engine или Unity, на базе которых сделано огромное количество 3D-игр, симуляторов, шутеров и стратегий.

Все потому, что на C++ можно использовать объектно-ориентированное программирование, а когда понадобится — обратиться к низкоуровневым возможностям языка, позволяющим хорошо оптимизировать игру под конкретные платформы и очень эффективно производить расчеты для графики. По этой же причине C++ применяется в графических редакторах (Adobe Photoshop).

Благодаря распараллеливанию (одновременному выполнению большого количества несложных математических операций) язык подходит для биткоинов и нейросетей. Первые можно майнить на C++, вторые — обучать: большинство библиотек для глубокого обучения (TensorFlow, Caffe, Shogun, Pytorch C++ API и т.д.) используют C++-код CUDA и OpenCL.

C++ незаменим для высоконагруженных приложений, его используют для разработки поисковых движков, роботов торговых бирж, систем управления базами данных и маршрутизации сетевого трафика.

С помощью C++ Mozilla Corporation разработала opensource-браузер Firefox, была создана Amadeus — система электронного бронирования авиабилетов, гостиниц, круизных туров и проката автомобилей (через нее проходит 5000 транзакций в секунду, более миллиарда транзакций ежедневно), благодаря C++ работают Яндекс.Поиск и поисковый движок Google.

C++ нужен не только программистам, но и:
техническим художникам: связующему звену между обычными художниками и 3D-моделистами на игровом проекте и разработчиками игрового движка (у которых очень популярен C++) для решения проблем необходимо разбираться в языке и понимать, как все запрограммировано;
математикам: такие типовые задачи вычислительной математики, как решение систем алгебраических уравнений, дифференцирование и интегрирование функций, оптимизация, интерполяция, экстраполяция и аппроксимация, решаются при помощи реализаций численных методов на C++;
физикам и химикам: на C++ моделируются среды и физические процессы;
музыкантам: да, даже им! Это могут быть исследования акустических эффектов, попытки формализации творческого процесса или даже создание музыки: на «‎алгорейвах»‎ люди зажигают под треки, генерируемые алгоритмами, которые вживую на сцене пишет диджей-программист, — вот это настоящий киберпанк.
А еще C++ — это круто, потому что с его помощью:
пишут критическое ПО для истребителей F-16 и F-35;
разрабатывают пакеты программ и библиотек ROOT для обработки экспериментальных данных физики высоких энергий;
по поверхности Марса самостоятельно ездят роверы NASA и летает телескоп Хаббл;
делает практически все Microsoft (Windows OS, пакет Office, Internet Explorer, Visual Studio);
творят искусство (генеративное) художники: пишут алгоритмы для генерации предметов живописи и скульптур.
C++: плюсы и минусы
Плюсы
Высокая производительность, потому что он не накладывает никакой избыточной нагрузки на программу, не использующую какие-либо возможности.
Поддержка множества стилей программирования (процедурное программирование, абстракцию данных, объектно-ориентированное программирование и обобщенное программирование). Поэтому разработчик может сам выбрать, в каком стиле ему писать программу.
Большое сообщество.
Помимо того что стандарты C++ постоянно обновляются и в него внедряется все больше улучшений, у языка огромное сообщество программистов. Учитывая сложность языка — не лентяев и опытных. Вы не останетесь один на один с проблемой: помимо литературы — от фундаментальных трудов до новых справочников, — у вас будет код, наработанный десятилетиями.


Никита Лестенко
ментор курса «Программирование на C++»
Минусы
Высокий порог входа. Решения об изменениях в C++ принимают на заседаниях комитета, участие в которых формально может принять любой разработчик. Но отправляться на такие собрания в другую страну за свой счет трудно, поэтому большинство участников — представители крупных IT-корпораций, таких как Google, Яндекс. А вот представителей интересов студентов или стартапов немного. Поэтому эксперты могут принять концепции, которые им кажутся очевидными, а для остальной аудитории они будут сложными.

C++ сложно выучить?
В отличие от Python, учить C++ cложно, но реально. C++ — это достаточно серьезный язык, к нему требуется осознанный подход. Чтобы начать изучать язык, желательно иметь общие представления о том, что такое программирование на C, как устроено «железо» и как работает операционная система.

Программируя на C++, нужно держать в голове сразу много нюансов: отслеживать типы данных, контролировать выделение и освобождение памяти. Сейчас появляется все больше средств, которые перекладывают эти обязанности на сам язык. Уже на этапе написания кода современные IDE (среды разработки) помогают следить за соблюдением стандартов, отлавливают большое количество ошибок, не всегда очевидных человеку без глубокого знания языка, автоматизируют процесс написания большого объема кода с помощью типовых конструкций.

Самые забавные казусы в C++ связаны с низкоуровневыми возможностями работы с памятью. Слышал такую историю: из-за невнимательности разработчика в процессе выполнения программы создавался бесконечный цикл — повторяющийся набор инструкций, который не имеет условия завершения. В итоге программа быстро занимала всю свободную память компьютера, поэтому он намертво зависал и переставал работать. Сейчас случайное возникновение такого кода маловероятно, но все еще возможно.


Никита Лестенко
ментор курса «Программирование на C++»
C++ очень полезен в качестве фундамента для обучения. Начиная свой путь с изучения С, а затем C++, вы получаете качественные знания основ программирования, ООП, структур данных и алгоритмов — всего того, что должен знать любой программист независимо от языка, на котором он специализируется.

Полезные ссылки
Книги:
Герберт Шилдт «C++: полное руководство»
Бьерн Страуструп «Язык программирования C++»
Бьерн Страуструп «Программирование. Принципы и практика использования C++»
Другое:
Бесплатный курс на Coursera
YouTube-канал о C++ и С#
Справочная информация о языке
Русскоязычное сообщество разработчиков
Бонус: C++ как оружие
Чем больше возможностей у системы, тем больше шансов, что они будут неправильно реализованы. Сам Бьёрн Страуструп говорил, что на C++ писать безопасный код легче, чем на его предшественнике С, но если все же допустить оплошность — выстрелом оторвет ногу целиком. Если сравнить с оружием, то в C++ это будет гибрид ружья с ножом: из него можно стрелять, но и самому пораниться легко.
Основные отличия между C++ и C#
Особенности	C++	C#
Тип языка	Процедурный и объектно-ориентированный.	Строго объектно-ориентированный.
Тип памяти	Управление памятью вручную (неявное и явное).	Управление памятью автоматическое (сборка мусора).
Платформозависимость	Более низкая платформозависимость, можно скомпилировать код для различных архитектур.	Работает в среде .NET Framework или .NET Core, что обеспечивает высокую переносимость между платформами.
Синтаксис	Синтаксис C++ более гибкий и позволяет более «оптимизированный» код.	C# предлагает более простой и читаемый синтаксис.
Библиотеки	Меньше стандартных библиотек, но множество сторонних библиотек и фреймворков.	Большая стандартная библиотека классов .NET, включая поддержку работы с различными облачными сервисами и протоколами.
Безопасность	Требуется больше внимания к безопасности при работе с памятью и указателями.	C# обеспечивает более высокий уровень безопасности за счет управления памятью сборщиком мусора.
Производительность	Исполнение кода на C++ может быть быстрее из-за отсутствия накладных расходов сборки мусора и других оптимизаций.	C# может быть менее производительным из-за сборки мусора и других абстракций .NET Framework. Однако в большинстве случаев производительность обеспечивает достаточный уровень для множества приложений.
Платформенные возможности	Более низкоуровневый доступ к аппаратным ресурсам и операционной системе.	C# предоставляет богатые возможности для взаимодействия с платформой .NET, включая готовые API для работы с файлами, сетью, GUI и т. д.
Области применения	Часто используется в системном программировании, играх и других задачах, где важна производительность и контроль над аппаратурой.	Часто используется для разработки приложений под Windows, веб-приложений, приложений для мобильных устройств и других проектов, где удобство разработки и высокая стабильность более важны.
Учтите, что каждый язык имеет свои преимущества и недостатки, и оптимальный выбор зависит от требований проекта, уровня знаний программистов и существующих инфраструктурных ограничений.
